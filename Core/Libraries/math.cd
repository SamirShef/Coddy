static class Math {
	public static let pi : double = 3.14159265358979323846d;
	public static let e : double = 2.71828182845904523536d;

	public static func sqrt : int(num : int) {
		if (num < 0) throw new Exception("Нельзя вычислить квадратный корень из отрицательного числа " + to_string(num));
		if (num == 0) return 0;

		let sqrt : int = 0;

		for (i : int : i < num : i++) {
			if (Math.pow(i + 1, 2) > num) {
				sqrt = i;
				break;
			}
		}

		return sqrt;
	}

	public static func sqrt : float(num : float) {
		if (num < 0) throw new Exception("Нельзя вычислить квадратный корень из отрицательного числа " + to_string(num));
		if (num == 0) return 0;

		let elipson : double = 0.00000000000000000000000000000000000001d;
		let z : float = num;
		let y : float = 0.5f * (z + num / z);

		while (this.abs(z - y) > elipson) {
			z = y;
			y = 0.5f * (z + num / z);
		}

		return z;
	}

	public static func sqrt : double(num : double) {
		if (num < 0) throw new Exception("Нельзя вычислить квадратный корень из отрицательного числа " + to_string(num));
		if (num == 0) return 0;

		let elipson : double = 0.00000000000000000000000000000000000001d;
		let z : double = num;
		let y : double = 0.5d * (z + num / z);

		while (this.abs(z - y) > elipson) {
			z = y;
			y = 0.5d * (z + num / z);
		}

		return z;
	}

	public static func sqrt : decimal(num : decimal) {
		if (num < 0) throw new Exception("Нельзя вычислить квадратный корень из отрицательного числа " + to_string(num));
		if (num == 0) return 0;

		let elipson : decimal = 0.00000000000000000000000000000000000001m;
		let z : decimal = num;
		let y : decimal = 0.5m * (z + num / z);

		while (this.abs(z - y) > elipson) {
			z = y;
			y = 0.5m * (z + num / z);
		}

		return z;
	}

	public static func abs : int(num : int) {
		if (num < 0) return num * -1;
		return num;
	}

	public static func abs : float(num : float) {
		if (num < 0) return num * -1;
		return num;
	}

	public static func abs : double(num : double) {
		if (num < 0) return num * -1;
		return num;
	}

	public static func abs : decimal(num : decimal) {
		if (num < 0) return num * -1;
		return num;
	}

	public static func round : int(num : float) {
		if (num % 1 >= 0.5f) return to_int(num - num % 1 + 1);
		return to_int(num - num % 1);
	}

	public static func round : int(num : double) {
		if (num % 1 >= 0.5d) return to_int(num - num % 1 + 1);
		return to_int(num - num % 1);
	}

	public static func round : int(num : decimal) {
		if (num % 1 >= 0.5m) return to_int(num - num % 1 + 1);
		return to_int(num - num % 1);
	}

	public static func floor : int(num : float) {
		return to_int(num - num % 1);
	}

	public static func floor : int(num : double) {
		return to_int(num - num % 1);
	}

	public static func floor : int(num : decimal) {
		return to_int(num - num % 1);
	}

	public static func ceil : int(num : float) {
		return to_int(num - (num % 1 != 0 ? (num > 0 ? num % 1 : (1 + num % 1)) : 0));
	}

	public static func ceil : int(num : double) {
		return to_int(num - (num % 1 != 0 ? (num > 0 ? num % 1 : (1 + num % 1)) : 0));
	}

	public static func ceil : int(num : decimal) {
		return to_int(num - (num % 1 != 0 ? (num > 0 ? num % 1 : (1 + num % 1)) : 0));
	}

	public static func max : int(a : int, b : int) {
		return a > b ? a : b;
	}

	public static func max : float(a : float, b : float) {
		return a > b ? a : b;
	}

	public static func max : double(a : double, b : double) {
		return a > b ? a : b;
	}

	public static func max : decimal(a : decimal, b : decimal) {
		return a > b ? a : b;
	}

	public static func min : int(a : int, b : int) {
		return a < b ? a : b;
	}

	public static func min : float(a : float, b : float) {
		return a < b ? a : b;
	}

	public static func min : double(a : double, b : double) {
		return a < b ? a : b;
	}

	public static func min : decimal(a : decimal, b : decimal) {
		return a < b ? a : b;
	}

	public static func pow : int(num : int, power : int) {
		if (power == 0) return 1;
		if (power == 1) return num;
		if (power < 0) return 0;

		let result : int = 1;

		for (i : int : i < power : i++) {
			result *= num;
		}

		return result;
	}

	public static func pow : float(num : float, power : int) {
		if (power == 0) return 1;
		if (power == 1) return num;

		let result : float = 1;
		let isNegativePower : boolean;
		if (power < 0) {
			isNegativePower = true;
			power *= -1;
		}

		for (i : int : i < power : i++) {
			result *= num;
		}

		return isNegativePower ? 1 / result : result;
	}

	public static func pow : double(num : double, power : int) {
		if (power == 0) return 1;
		if (power == 1) return num;

		let result : double = 1;
		let isNegativePower : boolean;
		if (power < 0) {
			isNegativePower = true;
			power *= -1;
		}

		for (i : int : i < power : i++) {
			result *= num;
		}

		return isNegativePower ? 1 / result : result;
	}

	public static func pow : decimal(num : decimal, power : int) {
		if (power == 0) return 1;
		if (power == 1) return num;

		let result : decimal = 1;
		let isNegativePower : boolean;
		if (power < 0) {
			isNegativePower = true;
			power *= -1;
		}

		for (i : int : i < power : i++) {
			result *= num;
		}

		return isNegativePower ? 1 / result : result;
	}

	public static func clamp : int(value : int, min : int, max : int) {
		return Math.max(Math.min(value, max), min);
	}
}
